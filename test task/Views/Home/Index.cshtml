@model IEnumerable<test_task.ViewModel.DrinkViewModel>

@{
    ViewData["Title"] = "Газированные напитки";
}

<div class="container my-4">
    <h2>Газированные напитки</h2>

    <div class="d-flex justify-content-between align-items-center my-3">
        <div class="d-flex gap-3 align-items-center">
            <div>
                <label for="brandSelect">Выберите бренд</label>
                <select id="brandSelect" class="form-select">
                    <option value="">Все</option>
                    <option value="Coca-Cola">Coca-Cola</option>
                    <option value="Fanta">Fanta</option>
                    <option value="Sprite">Sprite</option>
                    <option value="Dr Pepper">Dr Pepper</option>
                </select>
            </div>
            <div>
                <label for="priceRange" class="form-label">Стоимость</label>
                <input type="range" class="form-range" min="0" max="110" id="priceRange">
                <span>0 руб. - 110 руб.</span>
            </div>
        </div>
        <div class="d-flex gap-2">
            <button class="btn btn-secondary">Импорт</button>
            <button id="selectedCountBtn" class="btn btn-success" disabled>Выбрано: 0</button>
        </div>
    </div>

    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4">
        @foreach (var drink in Model.Select((d, i) => new { Drink = d, Index = i }))
{
    var drinkId = $"drink-{drink.Index}";
    <div class="col drink-item"
         data-brand="@drink.Drink.Name.Split(' ')[2]"
         data-price="@drink.Drink.Price">
        <div class="card h-100 text-center">
            <img src="@drink.Drink.ImageUrl" class="card-img-top p-3" alt="@drink.Drink.Name">
            <div class="card-body">
                <p class="card-text">@drink.Drink.Name</p>
                <p class="fw-bold">@drink.Drink.Price руб.</p>
                @if (drink.Drink.IsAvailable)
                {
                    <button 
                        class="btn btn-warning select-btn"
                        data-id="@drinkId"
                        data-selected="false">
                        Выбрать
                    </button>
                }
                else
                {
                    <button class="btn btn-secondary" disabled>Закончился</button>
                }
            </div>
        </div>
    </div>
}

    </div>
</div>

@section Scripts {
    <script>
        const selectedItems = new Set();
        const drinkItems = document.querySelectorAll('.drink-item');
        const brandSelect = document.getElementById('brandSelect');
        const priceRange = document.getElementById('priceRange');
        const priceLabel = priceRange.nextElementSibling;
        const counterBtn = document.getElementById('selectedCountBtn');

        function updateVisibleDrinks() {
            const selectedBrand = brandSelect.value;
            const maxPrice = parseFloat(priceRange.value);

            drinkItems.forEach(item => {
                const brand = item.getAttribute('data-brand');
                const price = parseFloat(item.getAttribute('data-price'));

                const matchBrand = selectedBrand === "" || brand === selectedBrand;
                const matchPrice = price <= maxPrice;

                item.style.display = (matchBrand && matchPrice) ? "block" : "none";
            });

            priceLabel.textContent = `0 руб. - ${maxPrice} руб.`;
        }

        function updatePriceRangeLimits() {
            const selectedBrand = brandSelect.value;
            let prices = [];

            drinkItems.forEach(item => {
                const brand = item.getAttribute('data-brand');
                const price = parseFloat(item.getAttribute('data-price'));

                if (selectedBrand === "" || brand === selectedBrand) {
                    prices.push(price);
                }
            });

            if (prices.length > 0) {
                const min = Math.min(...prices);
                const max = Math.max(...prices);
                priceRange.min = min;
                priceRange.max = max;
                priceRange.value = max;
                priceLabel.textContent = `0 руб. - ${max} руб.`;
            }
        }

        brandSelect.addEventListener('change', () => {
            updatePriceRangeLimits();
            updateVisibleDrinks();
        });

        priceRange.addEventListener('input', updateVisibleDrinks);

        // выбор товара
        document.querySelectorAll('.select-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const id = btn.getAttribute('data-id');
                const selected = btn.getAttribute('data-selected') === 'true';

                if (selected) {
                    selectedItems.delete(id);
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-warning');
                    btn.textContent = 'Выбрать';
                    btn.setAttribute('data-selected', 'false');
                } else {
                    selectedItems.add(id);
                    btn.classList.remove('btn-warning');
                    btn.classList.add('btn-success');
                    btn.textContent = 'Выбрано';
                    btn.setAttribute('data-selected', 'true');
                }

                const count = selectedItems.size;
                counterBtn.textContent = `Выбрано: ${count}`;
                counterBtn.disabled = count === 0;
            });
        });

        // начальная инициализация
        updatePriceRangeLimits();
        updateVisibleDrinks();
    </script>
}

